import React, { useState, useContext, useEffect, use } from 'react'
import { FaUser, FaLock, FaUserPlus } from 'react-icons/fa'
import { motion } from 'framer-motion'
import { ShopContext } from '../context/Shopcontext'
import { useNavigate,useSearchParams} from 'react-router-dom'
import { toast } from 'react-toastify'
import axios from 'axios'
import AuthContext from '../context/Authcontext'
import { ClipLoader } from "react-spinners";
import { FaGoogle } from 'react-icons/fa';
import { auth, provider, signInWithPopup } from '../firebase.js'
import { Helmet } from 'react-helmet'

const Login = () => {
  const { userData, setToken, token } = useContext(AuthContext)
  const navigate = useNavigate()
  let x = window.location.pathname === '/register'
  const [isRegistering, setIsRegistering] = useState(x ?true:false)
  const { backendurl } = useContext(ShopContext)
  const [loading, setLoading] = useState(false)
  const [loadingGoogle, setLoadingGoogle] = useState(false)
  const [searchParams] = useSearchParams();

  const referralCode= searchParams.get('ref') || null;

  console.log('referralCode', referralCode)
  useEffect(() => {
    if (token) {
      navigate('/')
    }
  }, [token])

  // Form data state
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
  })

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target
    setFormData(prev => ({ ...prev, [name]: value }))
  }
console.log({referralCode})
  const handleSubmit = async (e) => {
    e.preventDefault()

    try {
      setLoading(true)
      if (isRegistering) {
          let res = await axios.post(`${backendurl}/api/user/register`, { name: formData.name, email: formData.email, password: formData.password,referralCode })
          toast.success(res.data.message)
          setToken(res.data.token)
          localStorage.setItem('token', res.data.token)
          navigate('/')
      

      } else {
        let res = await axios.post(`${backendurl}/api/user/login`, { email: formData.email, password: formData.password })
        if (res.data.success) {
          navigate('/')
          toast.success(res.data.message)
          setToken(res.data.token)
          localStorage.setItem('token', res.data.token)
          navigate('/')



        } else {
          toast.error(res.data.message)

        }
      }
    } catch (error) {

    } finally {
      setLoading(false)
      setFormData({ name: '', email: '', password: '' })
    }

    // Clear form

  }

  const handleGoogleLogin = async () => {
    try {
      setLoadingGoogle(true)
      const result = await signInWithPopup(auth, provider);
      const { displayName, email, photoURL, uid } = result.user;
      console.log('data that get from response', { displayName, email, photoURL, uid, referralCode })


      const res = await axios.post(`${backendurl}/api/user/google-auth`, {
        googleId: uid,
        name: displayName,
        email,
        avatar: photoURL,
        referralCode: referralCode
      });

      console.log(res.data)
      if (res.data.success) {
        setToken(res.data.token)
        localStorage.setItem('token', res.data.token)
        navigate('/')
      }



    } catch (er) {
      console.log(er)
    } finally {
      setLoadingGoogle(false)
    }

  }


  return (
    <>
      <Helmet>
        <title>{isRegistering ? 'Sign Up' : 'Login'} | E-commerce</title>
        <meta name="description" content={isRegistering ? 'Create an account to start shopping on our E-commerce platform.' : 'Login to your E-commerce account to continue shopping.'} />
      </Helmet>
      <div className="flex items-start justify-center min-h-screen pt-20 px-1 sm:px-0 ">
        <motion.div
          className="w-full max-w-sm p-6 rounded-xl text-gray-700"
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.4 }}
        >
        <motion.h2
          className="text-xl font-bold mb-6 text-center"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 }}
        >
          {isRegistering ? 'Create Account' : 'Welcome Back'}
        </motion.h2>

        <form onSubmit={handleSubmit} className="space-y-4">
          {isRegistering && (
            <motion.div
              className="relative"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ delay: 0.1 }}
            >
              <FaUserPlus className="absolute top-1/2 -translate-y-1/2 left-3 text-gray-400" />
              <input
                type="text"
                name="name"
                placeholder="Full Name"
                required
                value={formData.name}
                onChange={handleChange}
                className="w-full pl-10 pr-4 py-2 text-sm border rounded-lg outline-none focus:ring-1 focus:ring-indigo-500"
              />
            </motion.div>
          )}

          <div className="relative">
            <FaUser className="absolute top-1/2 -translate-y-1/2 left-3 text-gray-400" />
            <input
              type="email"
              name="email"
              placeholder="Email"
              autoComplete="email"
              required
              value={formData.email}
              onChange={handleChange}
              className="w-full pl-10 pr-4 py-2 text-sm border rounded-lg outline-none focus:ring-1 focus:ring-indigo-500"
            />
          </div>

          <div className="relative">
            <FaLock className="absolute top-1/2 -translate-y-1/2 left-3 text-gray-400" />
            <input
              type="password"
              name="password"
              placeholder="Password"
              autoComplete='current-password'
              required
              value={formData.password}
              onChange={handleChange}
              className="w-full pl-10 pr-4 py-2 text-sm border rounded-lg outline-none focus:ring-1 focus:ring-indigo-500"
            />
          </div>

          <motion.button
            type="submit"
            className="w-full py-2 text-sm font-semibold text-white bg-indigo-600 rounded-lg hover:bg-indigo-500 transition"
            whileTap={{ scale: 0.97 }}
          >
            {loading ? <ClipLoader size={20} color={'white'} /> : (isRegistering ? 'Sign up' : 'Login')}
          </motion.button>
        </form>

        <div className="mt-4 text-center text-sm">
          {isRegistering ? 'Already have an account?' : "Don't have an account?"}{' '}
          <button
            type="button"
            onClick={() => setIsRegistering(!isRegistering)}
            className="text-indigo-600 hover:underline font-medium"
          >
            {isRegistering ? 'Login' : 'Sign up'}
          </button>
        </div>

        <div className="flex items-center gap-3 mt-4">
          <div className="h-px bg-gray-300 flex-1"></div>
          <span className="text-xs text-gray-400">OR</span>
          <div className="h-px bg-gray-300 flex-1"></div>
        </div>

        <button
          type="button"
          onClick={handleGoogleLogin}
          className="w-full mt-4 py-2 flex items-center justify-center gap-3 border border-gray-300 rounded-lg hover:bg-gray-100 transition"
        >
          {!loadingGoogle && (<img
            src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg"
            alt="Google"
            className="w-5 h-5"
          />)}

          <span className="text-sm font-medium text-gray-700">{loadingGoogle ? <ClipLoader size={20} /> : 'Continue with Google'}</span>
        </button>
      </motion.div>
      </div>
    </>
  )
}

export default Login


import React from 'react'
import Navbar from './components/Navbar'
import Sidebar from './components/Sidebar'
import Add from './pages/Add'
import List from './pages/List'
import Order from './pages/Order'
import { Routes, Route } from 'react-router-dom'
import AdminLogin from './pages/AdminLogin'
import { useState, useContext } from 'react'
import { AdminContext } from './context/admincontext'
import { ToastContainer, toast } from 'react-toastify';
import AdminMessages from './pages/AdminMessages'
import Home from './pages/Home'
import CashOut from './pages/CashOut'
import { useLocation } from 'react-router-dom'
import UpdateProduct from './pages/UpdateProduct'
const App = () => {
  let { token, setToken } = useContext(AdminContext)
  let location = useLocation()


  return (
    <>
      <ToastContainer />
      {token === '' ? <AdminLogin /> :
        <>
          
       {  /* {location.pathname==='/' ? <Home /> :*/}
          <div className='flex w-full h-min-full'>
          {/* Sidebar */}


          <Sidebar />
          <div className=' w-[90%] min-h-screen'>
            <Routes>
              <Route path='/' element={<Home />} />
              <Route path='/add' element={<Add />} />
              <Route path='/list' element={<List />} />
              <Route path='/orders' element={<Order />} />
              <Route path='/message' element={<AdminMessages/>} />
              <Route path='/cashout' element={<CashOut />} />
              <Route path="/update-product/:id" element={<UpdateProduct />} />
            </Routes>
          </div>
        </div>
        
          
        </>
      }


    </>
  )
}

export default App




import React, { useEffect, useState, useContext } from 'react';
import axios from 'axios';
import { motion } from 'framer-motion';
import { toast } from 'react-toastify';
import { FaTrash, FaCheck, FaTimes, FaClock, FaReceipt, } from 'react-icons/fa';
import { AdminContext } from '../context/admincontext';
import { UserIcon, PhoneIcon, MapPinIcon, HomeIcon } from "lucide-react";
import CustomerInfoSection from '../components/CustomerInfoSection';
import { ClipLoader } from "react-spinners"


const statusOptions = [
  'pending_verification',
  'completed',
  'cancelled',
  'processing',
  'shipped',
  'delivered',
  'refunded',
];

const statusIcons = {
  pending_verification: <FaClock className="text-yellow-500" />,
  completed: <FaCheck className="text-green-600" />,
  cancelled: <FaTimes className="text-red-500" />,
  processing: <FaClock className="text-blue-500" />,
  shipped: <FaCheck className="text-blue-600" />,
  delivered: <FaCheck className="text-purple-600" />,
  refunded: <FaTimes className="text-gray-500" />,
};

const AdminOrders = () => {
  const { backendurl, token } = useContext(AdminContext);

  const [loading, setLoading] = useState(false)
  const [id, setId] = useState(null);

  const [firstLevel, setFirstLevel] = useState(0);
  const [secondLevel, setSecondLevel] = useState(0);
  const [profit, setProfit] = useState(0);


  //console.log('token',token)
  //console.log('url',backendurl)
  const [orders, setOrders] = useState([]);

  const fetchOrders = async () => {
    try {
      setLoading(true)
      const res = await axios.get(`${backendurl}/api/order/admin-orders`, {
        headers: { token },
      });

      console.log('ADMIN ORDER RESPONSE', res)
      //setOrders(res.data.orders);
      let orders = res.data.orders
      setOrders(Array.isArray(res.data.orders) ? res.data.orders.reverse() : []);

    } catch (err) {
      toast.error('Failed to load orders');
    } finally {
      setLoading(false)
    }
  };

  const updateStatus = async (id, status) => {
    try {
      setLoading(true)
      const res = await axios.patch(
        `${backendurl}/api/order/${id}/status`,
        { status },
        { headers: { token } }
      );
      toast.success('Status updated');
      fetchOrders();
    } catch (err) {
      toast.error('Failed to update status');
    } finally {
      setLoading(false)
    }
  };

  const deleteOrder = async (id) => {
    try {
      setLoading(true)
      await axios.delete(`${backendurl}/api/order/${id}`, {
        headers: { token },
      });
      toast.success('Order deleted');
      setOrders(orders.filter((o) => o._id !== id));
    } catch (err) {
      toast.error('Delete failed');
    } finally {
      setLoading(false)
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);


  const sendGift = async (orderId) => {
    try {

      console.log('order id', orderId)
      setLoading(true);
      const res = await axios.post(`${backendurl}/api/order/referral-rewards`, { orderId, firstLevel, secondLevel }, {
        headers: { token }
      }
      );
      toast.success(res.data?.message || 'Gift sent successfully!');
      console.log('Gift sent response:', res);
      fetchOrders();
    } catch (err) {
      toast.error(
        err.response?.data?.message || 'Failed to send gift'
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <>
      <div className="p-6 h-[100vh] overflow-y-scroll">
        <div>
          {
            loading && <ClipLoader size={20} />
          }
        </div>
        {Array.isArray(orders) && orders.length === 0 ? (
          <p className="text-gray-500">No orders available.</p>

        ) : (
          <div className="space-y-6">
            {orders.map((order) => (

              <motion.div
                key={order._id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-white rounded-lg shadow-md p-4 border border-gray-100"
              >

                <div className="flex justify-between items-start ">
                  <div>
                    <div className="text-sm text-gray-700 ">
                      {/* <span className="font-medium">User:</span> {order.user?.name} ({order.user?.email}) */}

                      {order.receiptUrl && (
                        <a
                          href={order.receiptUrl}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center gap-2 text-blue-600 hover:underline"
                        >
                          <FaReceipt />
                          View Receipt
                        </a>
                      )}
                    </div>


                    <div className="text-xs text-gray-500 mt-1">
                      Order ID: {order._id.slice(-8)} | {new Date(order.createdAt).toLocaleString()}
                    </div>
                  </div>
                  <div className="text-sm flex items-center gap-2">
                    {loading ? <ClipLoader size={15} /> : statusIcons[order.status]}
                    <select
                      value={order.status}
                      onChange={(e) => updateStatus(order._id, e.target.value)}
                      className="text-sm border rounded px-2 py-1"
                    >
                      {statusOptions.map((status) => (
                        <option key={status} value={status}>
                          {status.replace('_', ' ')}
                        </option>
                      ))}
                    </select>
                    <button
                      onClick={() => deleteOrder(order._id)}
                      className="ml-2 text-red-600 hover:text-red-800"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>

                <div className="mt-4  pt-3 space-y-2">
                  {order.cart.map((item, i) => (
                    <div key={i} className="flex justify-between items-center text-sm border-2  p-2 rounded-md">
                      <div className="flex items-center gap-2">
                        <img src={item.product?.images?.[0]} alt="" className="w-12 h-12 rounded object-cover" />
                        <div>
                      
                          <div>{item.product?.name}</div>
                          <div className="text-xs text-gray-500">Qty: {item.quantity}</div>


                          {item.variant &&
                            Object.entries(item.variant).map(([key, val]) => (
                              <span key={key} className="text-xs text-gray-500">
                                {' '}
                                | {key.charAt(0).toUpperCase() + key.slice(1)}:{' '}
                                {val?.value}
                              </span>
                            ))}


                        </div>
                      </div>
                      
                      <div className="flex flex-col items-end text-xs gap-1">
                        <div>ETB base price {item.product?.price}</div>
                        <div>profit {item.product?.price * item.quantity}</div>
                      </div>

                    </div>
                  ))}
                </div>

                <div className="mt-3 text-sm text-gray-600">
                  <p></p>
                  Total: <span className="font-semibold">ETB {order.totalPrice}</span>
                </div>

                <CustomerInfoSection order={order} />


                <div className="mt-4 flex justify-end">
                  <input
                    type="number"
                    placeholder="L1 (ex 20)"
                    className="border rounded px-2 py-1 mr-2 max-w-[100px]"
                    disabled={loading}
                    onChange={(e) => setFirstLevel(e.target.value)}
                  />
                  <input
                    type="number"
                    placeholder="L2(ex 10)"
                    className="border rounded px-2 py-1 mr-2 max-w-[100px]"
                    disabled={loading}
                    onChange={(e) => setSecondLevel(e.target.value)}
                  />
                  <button
                    className="flex items-center gap-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded shadow transition"

                    onClick={() => sendGift(order._id)}
                    disabled={loading}
                    title="Send Gift"
                  >
                    🎁{loading ? <ClipLoader size={15} color={'white'} /> : ' '}
                  </button>
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </div>

    </>
  );
};

export default AdminOrders;
